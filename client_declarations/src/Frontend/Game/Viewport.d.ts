import { DiagnosticUpdater, Planet, WorldCoords } from "@darkforest_eth/types";
import GameUIManager from "../../Backend/GameLogic/GameUIManager";
import { CanvasCoords } from "../../Backend/Utils/Coordinates";
import { Chunk } from "../../_types/global/GlobalTypes";
import { AnimationManager } from "./ViewportAnimation";
export declare const getDefaultScroll: () => number;
declare type ViewportData = {
    widthInWorldUnits: number;
    centerWorldCoords: WorldCoords;
};
declare class Viewport {
    static instance: Viewport | undefined;
    centerWorldCoords: WorldCoords;
    widthInWorldUnits: number;
    heightInWorldUnits: number;
    viewportWidth: number;
    viewportHeight: number;
    isPanning: boolean;
    mouseLastCoords: CanvasCoords | undefined;
    canvas: HTMLCanvasElement;
    isFirefox: boolean;
    gameUIManager: GameUIManager;
    mousedownCoords: CanvasCoords | undefined;
    velocity: WorldCoords | undefined;
    momentum: boolean;
    mouseSensitivity: number;
    intervalId: ReturnType<typeof setTimeout>;
    frameRequestId: number;
    diagnosticUpdater?: DiagnosticUpdater;
    scale: number;
    isSending: boolean;
    animationManager: AnimationManager;
    constructor(gameUIManager: GameUIManager, centerWorldCoords: WorldCoords, widthInWorldUnits: number, viewportWidth: number, viewportHeight: number, canvas: HTMLCanvasElement);
    setDiagnosticUpdater(diagnosticUpdater: DiagnosticUpdater): void;
    onSendInit(): void;
    onSendComplete(): void;
    get minWorldWidth(): number;
    get maxWorldWidth(): number;
    getViewportPosition(): {
        x: number;
        y: number;
    };
    getBottomBound(): number;
    getLeftBound(): number;
    getTopBound(): number;
    getRightBound(): number;
    getViewportWorldWidth(): number;
    getViewportWorldHeight(): number;
    setMouseSensitivty(mouseSensitivity: number): void;
    static getInstance(): Viewport;
    static destroyInstance(): void;
    static initialize(gameUIManager: GameUIManager, widthInWorldUnits: number, canvas: HTMLCanvasElement): Viewport;
    onResize(): void;
    getStorageKey(): string;
    getStorage(): ViewportData | undefined;
    setStorage(): void;
    setData(data: ViewportData): void;
    centerPlanet(planet: Planet | undefined): void;
    zoomPlanet(planet?: Planet, radii?: number): void;
    centerCoords(coords: WorldCoords): void;
    centerChunk(chunk: Chunk): void;
    zoomIn(): void;
    zoomOut(): void;
    onMouseDown(canvasCoords: CanvasCoords): void;
    onMouseMove(canvasCoords: CanvasCoords): void;
    onMouseUp(canvasCoords: CanvasCoords): void;
    onMouseOut(): void;
    onScroll(deltaY: number, forceZoom?: boolean): void;
    onWindowResize(): void;
    canvasToWorldCoords(canvasCoords: CanvasCoords): WorldCoords;
    worldToCanvasCoords(worldCoords: WorldCoords): CanvasCoords;
    worldToCanvasDist(d: number): number;
    canvasToWorldDist(d: number): number;
    worldToCanvasX(x: number): number;
    canvasToWorldX(x: number): number;
    worldToCanvasY(y: number): number;
    canvasToWorldY(y: number): number;
    isInOrAroundViewport(coords: WorldCoords): boolean;
    isInViewport(coords: WorldCoords): boolean;
    intersectsViewport(chunk: Chunk): boolean;
    isValidWorldWidth(width: number): boolean;
    setWorldWidth(width: number): void;
    setWorldHeight(height: number): void;
    updateDiagnostics(): void;
}
export default Viewport;
